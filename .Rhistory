range(airquality$ozone, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquaility, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
lenth(par)
length(par)
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month == "May")
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col = "blue", pch = 4)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 20)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,18), col = c("blue", "red"), legend = c("May", "Other Months")
)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v = median(airquality$Wind, lty=2, lwd = 2))
abline(v = median(airquality$Wind), lty=2, lwd = 2))
abline(v = median(airquality$Wind), lty=2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,
| 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
Type xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors, 10)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
Oxcc
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green", alpha = 0.5))
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5))
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x,y, pch = 19, col = rgb(0, 0.5, 0.5))
plot(x,y, pch = 19, col = rgb(0, 0.5, 0.5, alpha = 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv ~.)
qplot(displ, hwy, data = mpg, facets = .~drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = .~drv)
g < - ggplot(mpg, aes(displ, hwy))
g <- ggplot(mpg, aes(displ, hwy))
g
summary(g)
g + geom_point()
g + geom_point()+geom_smooth()
g + geom_point()+geom_smooth(method="lm")
g + geom_point()+geom_smooth(method="lm")+facet_grid = .~drv
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim(-3,3))
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x=displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
now
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) + geom_smooth(method="lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
dismt
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min())
apply(distTmp, 2, which.min)
points(x,y,pch=19, cex=2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
play()
x
y
newClust
nxt()
points(newCx, newCy, col = cols1, pch = 8, cex =2, lwd =2)
mdist(x,y,newCx, newCy)
apply(distTmp, 2, which.min)
apply(distTmp2, 2, which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust2])
tapply(x,newClust, mean)
tapply(x,newClust2, mean)
tapply(y,newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd =2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmat(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd$1d
svd$d
svd1$d
head(constantMatrix)
d
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
j
svd1$u
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
svd1$u
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering<-hclust(mdist)
myplcust(hclustering, lab.col=unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,c(562,563)]))
svd1 <- svd(scale(sub1[,c(562,563)])
)
sub1
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[2])
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <-  kmeans(sub1, 6)
kClust <- kmeans(sub1[,-c(562,563)], 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab = "Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab = "Laying Cluster")
plot(kClust$centers[walkdown, 1:12], pch=19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log(x0),log(x1))
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt$county.site), nrow)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(median(x0sub, na.rm = TRUE), lwd = 2)
abline(h=median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch=20)
abline(h=median(x0sub, na.rm = TRUE), lwd = 2)
abline(h=median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.fram(state = names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0,d1,by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52),mrg[,2], xlim = c(.5,2,.5)))
with(mrg, plot(rep(1,52),mrg[,2], xlim = c(.5,2.5)))
with(mrg, points(rep(1,52),mrg[,3], xlim = c(.5,2.5)))
with(mrg, points(mrg[,3], xlim = c(.5,2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1,52),mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x<mrg$mean.y,]
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
setwd("C:/Users/Sara/OneDrive/Documents/Career Development/Data Science - Coursera/ReproducibleResearch/RepData_PeerAssessment1")
data <- read.csv("activity/activity.csv")
data <- read.csv("/activity/activity.csv")
data <- read.csv("activity/activity.csv")
data <- read.csv("activity/activity.csv")
head(data)
?aggregate
aggregate(steps ~ date, data = data, sum)
plot(totalsteps)
totalsteps <- aggregate(steps ~ date, data = stepsdata, sum)
stepsdata <- read.csv("activity/activity.csv")
totalsteps <- aggregate(steps ~ date, data = stepsdata, sum)
plot(totalsteps)
hist(totalsteps)
hist(totalsteps$steps)
hist(totalsteps$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day")
hist(totalsteps$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day", ylim = 30)
hist(totalsteps$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day")
hist(totalsteps$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day", ylim = c(0,30))
summary(totalsteps)
mean(totalsteps)
mean(totalsteps$steps)
median(totalsteps$steps)
intervals <- aggregate(steps ~ interval, data = stepsdata, mean)
head(intervals)
plot(interval, steps, data = intervals, type = "l")
plot(intervals$interval, interval$steps, type = "l")
intervals$interval
plot(intervals$interval, intervals$steps, type = "l")
plot(intervals$interval, intervals$steps, type = "l", ylab = "Average number of steps", xlab = "Interval")
max(intervals$steps)
?max
which.max(intervals$steps)
intervals[which.max(intervals$steps),1]
sum(is.na(stepsdata$steps))
?replace
NArem <- replace(stepsdata, is.na(stepsdata$steps), x)
NArem <- replace(stepsdata, is.na(stepsdata$steps), "x")
NArem <- replace(stepsdata, is.na(stepsdata$steps), "a")
NArem <- replace(stepsdata$steps, is.na(stepsdata$steps), "a")
NArem <- replace(stepsdata$steps, is.na(stepsdata$steps), intervals[interval = stepsdata$interval,2])
in.na(stepsdata$steps)
is.na(stepsdata$steps)
?match
NArem <- stepsdata
NArem[is.na(NArem$steps)] <- intervals[NArem$interval %in% intervals$interval, 2]
?ifelse
?match
NArem[is.na(NArem$steps)] <- intervals[match(NArem$interval, intervals$interval), 2]
?ifelse
?if
else
NArem$steps <- ifelse(is.na(NArem$steps), intervals$steps[NArem$interval %in% intervals$interval] , NArem$steps)
head(NArem)
5 %in% intervals$interval
intervals$steps[5 %in% intervals$interval]
match(5, intervals$interval)
NArem$steps <- ifelse(is.na(NArem$steps), intervals$steps[match(NArem$interval, intervals$interval)] , NArem$steps)
head(NArem)
head(stepsdata)
head(intervals)
stepsdata[10:20,]
stepsdata[1000:1020,]
NArem[1000:1020,]
hist(NArem$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day", ylim = c(0,30))
hist(NArem$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day")
hist(totalstepsNArem$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day")
totalstepsNArem <- aggregate(steps ~ date, data = NArem, sum)
hist(totalstepsNArem$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day")
hist(totalstepsNArem$steps, xlab = "Total number of steps per day", main = "Histogram of total number of steps per day", ylim = c(0,40))
mean(totalstepsNArem$steps)
median(totalstepsNArem$steps)
summary(totalstepsNArem)
summary(totalsteps)
match(NArem$interval, intervals$interval)
intervals$steps[1]
intervals$steps[2]
intervals$steps[3]
?ifelse
NArem$interval
?weekdays
stepsdata$date[1]
weekday(stepsdata$date[1])
weekdays(stepsdata$date[1])
weekdays(as.date(stepsdata$date[1]))
weekdays(as.Date(stepsdata$date[1]))
NArem$day <- ifelse(weekdays(as.Date(stepsdata$date[1])) == "Saturday"|"Sunday", "weekend", "weekday")
weekdays(as.Date(stepsdata$date[1])) == "Saturday"|"Sunday"
weekdays(as.Date(stepsdata$date[1])) == "Saturday"
weekdays(as.Date(stepsdata$date[1])) == "Saturday" | weekdays(as.Date(stepsdata$date[1])) == "Sunday"
weekdays(as.Date(stepsdata$date[1])) == "Saturday" | weekdays(as.Date(stepsdata$date[1])) == "Monday"
weekdays(as.Date(stepsdata$date[1])) == "Saturday" | weekdays(as.Date(stepsdata$date[1])) == "Sunday"
condition <- weekdays(as.Date(stepsdata$date[1])) == "Saturday" | weekdays(as.Date(stepsdata$date[1])) == "Sunday"
NArem$day <- ifelse(condition, "weekend", "weekday")
NArem$day
condition <- weekdays(as.Date(stepsdata$date)) == "Saturday" | weekdays(as.Date(stepsdata$date[1])) == "Sunday"
condition
NArem$day <- ifelse(condition, "weekend", "weekday")
NArem$day
weekends <- aggregate(steps ~ interval + day, data = NArem, mean)
weekends
library(ggplot2)
qplot(weekends)
?qplot
qplot(weekends$interval, weekends$steps, facets = weekends$day)
qplot(weekends$interval, weekends$steps)
+ facet_grid(. ~ day)
+ facet_grid(day ~ .)
qplot(interval, steps, data = weekends, facet_grid(day ~ .))
qplot(interval, steps, data = weekends, facet_grid = (day ~ .))
qplot(interval, steps, data = weekends)
+ facet_grid(day ~ .)
qplot(interval, steps, data = weekends) + facet_grid(day ~ .)
?qplot
qplot(interval, steps, data = weekends, geom = "line") + facet_grid(day ~ .)
qplot(interval, steps, data = weekends, geom = "line", ylab = "Average number of steps", xlab = "interval") + facet_grid(day ~ .)
knit2html(PA1_template.Rmd)
library(knitr)
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
?knit2html
library(rmarkdown)
knit2html("PA1_template.Rmd", output = "PA1_template.html")
render("PA1_template.Rmd")
?render
render("PA1_template.Rmd", output_format = "all")
